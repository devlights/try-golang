package gotour16

import "fmt"

// Slice は、 Tour of Go - Slices (https://tour.golang.org/moretypes/7) の サンプルです。
func Slice() error {
	// ------------------------------------------------------------
	// Go言語のスライス
	// Go言語のスライスは、他の言語でいう 可変長リスト みたいな感じ.
	// 配列の一部分をスライスしたものから生成することも出来るし、ゼロから生成することも
	// 出来る. サイズの拡張は、自動で行われる.
	//
	// スライスは []型名 で表す.
	//
	// 配列からスライスを取り出す場合は、pythonの様に a[1:4] のように部分を指定する.
	//
	// スライスは、長さ（length) と 容量 (capacity) を持つ
	//   - 長さは、スライスに含まれる要素数
	//     - 長さは len() で取得できる
	//   - 容量は、スライスの最初の要素から数えて、元となる配列の要素数
	//     - 容量は、cap() で取得できる
	// 要素の追加は、 組み込み関数 append() を使用して行う
	// 要素の削除も、　組み込み関数 append() を使用して行う
	//   - ちょっとトリッキー
	//   - append(slice[:i], slice[i+1:]...)
	// スライスのゼロ値は、nil
	//   - nil な スライスは、長さが0で容量も0で、元となる配列の参照もなし
	// スライスを動的サイズで生成するには、組み込み関数 make() を使用して行う
	//
	// スライスは、配列への参照のようなものなので、スライスの要素を変更すると
	// 元の配列にも影響する.
	// ------------------------------------------------------------
	var (
		arr  = [5]int{1, 2, 3, 4, 5}
		sli1 = arr[1:4]
		sli2 = []int{1, 2, 3, 4, 5}
		sli3 []int
	)

	fmt.Printf("%#v\t%#v\t%#v\t%#v\n", arr, sli1, sli2, sli3)
	fmt.Printf("%v\t%v\n", len(sli1), cap(sli1))

	// 組み込み関数 make() を使用して、新たにスライスを生成して割当
	sli3 = make([]int, 5) // 長さが5のスライスを割り当て
	fmt.Printf("%#v\tlen=%d\tcap=%d\n", sli3, len(sli3), cap(sli3))

	sli3 = make([]int, 0, 5) // 長さは0で、容量が5のスライスを割り当て
	fmt.Printf("%#v\tlen=%d\tcap=%d\n", sli3, len(sli3), cap(sli3))

	// 組み込み関数 append() を使用して、スライスに要素を追加する
	// append() は、第一引数に指定したスライスに要素を追加するのではなく、新たなスライスを戻り値で
	// 返すことに注意。以下は、わざと別の変数で受けているが、よく利用するのは以下のようにすること
	//   sli3 = append(sli3, 100, 200)
	sli4 := append(sli3, 100, 200, 300)
	fmt.Printf("%#v\t%#v\n", sli3, sli4)

	// スライスのループは、配列と同様に行う
	for i, v := range sli4 {
		fmt.Print(i, v, "\t")
	}

	fmt.Println("")

	// スライスから要素を削除するのも append() を使用する
	// 要は、削除したい要素のインデックスを覗いてスライスを再構築するという形になる
	// 以下は、インデックス[1]（値は200) を削除している
	//
	// sli4[2:]... となっている 「...」はこのシーケンスを展開するという意味
	// python の *list と同じ感じ
	//
	// 可変長引数の場合は、 「...」 が 前に付く
	//   func A(numbers ...int) {}
	//
	// 参考: https://golang.org/ref/spec#Passing_arguments_to_..._parameters
	sli4 = append(sli4[:1], sli4[2:]...)
	fmt.Println(sli4)

	return nil
}
