// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package stack

type (
	// BoolStack -- スタック
	BoolStack struct {
		items []bool
	}
)

// NewBoolStack -- 新しいスタックを生成して返します.
func NewBoolStack() *BoolStack {
	v := new(BoolStack)
	v.items = make([]bool, 0, 0)
	return v
}

// Push -- データを投入します.
func (s *BoolStack) Push(v bool) {
	s.items = append(s.items, v)
}

// Pop -- データを取り出します.
func (s *BoolStack) Pop() bool {
	last := s.items[len(s.items)-1]
	s.items = s.items[:len(s.items)-1]
	return last
}

type (
	// StringStack -- スタック
	StringStack struct {
		items []string
	}
)

// NewStringStack -- 新しいスタックを生成して返します.
func NewStringStack() *StringStack {
	v := new(StringStack)
	v.items = make([]string, 0, 0)
	return v
}

// Push -- データを投入します.
func (s *StringStack) Push(v string) {
	s.items = append(s.items, v)
}

// Pop -- データを取り出します.
func (s *StringStack) Pop() string {
	last := s.items[len(s.items)-1]
	s.items = s.items[:len(s.items)-1]
	return last
}

type (
	// IntStack -- スタック
	IntStack struct {
		items []int
	}
)

// NewIntStack -- 新しいスタックを生成して返します.
func NewIntStack() *IntStack {
	v := new(IntStack)
	v.items = make([]int, 0, 0)
	return v
}

// Push -- データを投入します.
func (s *IntStack) Push(v int) {
	s.items = append(s.items, v)
}

// Pop -- データを取り出します.
func (s *IntStack) Pop() int {
	last := s.items[len(s.items)-1]
	s.items = s.items[:len(s.items)-1]
	return last
}
