// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package queue

type (
	// BoolQueue -- キュー
	BoolQueue struct {
		items []bool
	}
)

// NewBoolQueue -- 新しいキューを生成して返します.
//
//noinspection GoUnusedExportedFunction
func NewBoolQueue() *BoolQueue {
	q := new(BoolQueue)
	q.items = make([]bool, 0, 0)
	return q
}

// Count -- データの件数を返します.
func (q *BoolQueue) Count() int {
	return len(q.items)
}

// Enqueue -- データを投入します.
func (q *BoolQueue) Enqueue(v bool) (ok bool) {
	q.items = append(q.items, v)
	ok = true
	return
}

// Dequeue -- データを取り出します.
func (q *BoolQueue) Dequeue() (v bool, ok bool) {
	if q.Count() == 0 {
		ok = false
		return
	}

	v = q.items[0]
	if q.Count() == 0 {
		ok = true
		return
	}

	q.items = q.items[1:]
	ok = true

	return
}

type (
	// StringQueue -- キュー
	StringQueue struct {
		items []string
	}
)

// NewStringQueue -- 新しいキューを生成して返します.
//
//noinspection GoUnusedExportedFunction
func NewStringQueue() *StringQueue {
	q := new(StringQueue)
	q.items = make([]string, 0, 0)
	return q
}

// Count -- データの件数を返します.
func (q *StringQueue) Count() int {
	return len(q.items)
}

// Enqueue -- データを投入します.
func (q *StringQueue) Enqueue(v string) (ok bool) {
	q.items = append(q.items, v)
	ok = true
	return
}

// Dequeue -- データを取り出します.
func (q *StringQueue) Dequeue() (v string, ok bool) {
	if q.Count() == 0 {
		ok = false
		return
	}

	v = q.items[0]
	if q.Count() == 0 {
		ok = true
		return
	}

	q.items = q.items[1:]
	ok = true

	return
}
